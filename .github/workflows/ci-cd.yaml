on:
  push:
    branches:
      - main
    paths:
      - "3-CICD/index.html"
  workflow_dispatch:  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ebloemer/nginx-server:${{ github.sha }} -f 3-CICD/Dockerfile 3-CICD

    - name: Push Docker image
      run: |
        docker push ebloemer/nginx-server:${{ github.sha }}

    - name: Update Helm values file
      run: |
        sed -i "s|tag:.*|tag: \"${{ github.sha }}\"|g" 3-CICD/appset/apps/nginx-web-server/helm/values.yaml

    - name: Commit and Push Updated values.yaml
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add 3-CICD/appset/apps/nginx-web-server/helm/values.yaml
        git commit -m "Update values.yaml with new image tag: ${{ github.sha }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    

    # - name: Deploy on remote server
    #   uses: appleboy/ssh-action@v0.1.10
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USER }}
    #     key: ${{ secrets.SERVER_SSH_KEY }}
    #     script: |
    #       echo "Creando y ejecutando el script en el servidor remoto..."
    #       mkdir -p ~/deploy-scripts
    #       cat << EOF > ~/deploy-scripts/deploy.sh
    #       #!/bin/bash

    #       if [ -z "\$1" ]; then
    #         echo "Error: Debes proporcionar el hash SHA como parámetro."
    #         echo "Uso: \$0 <sha>"
    #         exit 1
    #       fi

    #       SHA=\$1
    #       IMAGE_NAME="ebloemer/nginx-server"
    #       CONTAINER_NAME="nginx-server"

    #       echo "Desplegando la imagen: \$IMAGE_NAME:\$SHA"

    #       if [ "\$(docker ps -aq -f name=\$CONTAINER_NAME)" ]; then
    #         echo "Deteniendo y eliminando el contenedor anterior..."
    #         docker stop \$CONTAINER_NAME && docker rm \$CONTAINER_NAME
    #       fi

    #       echo "Eliminando la imagen anterior..."
    #       docker image rm -f \$IMAGE_NAME:\$SHA || echo "No se encontró una imagen anterior con este SHA."

    #       echo "Haciendo pull de la nueva imagen..."
    #       docker pull \$IMAGE_NAME:\$SHA

    #       echo "Ejecutando el nuevo contenedor..."
    #       docker run -d --name \$CONTAINER_NAME -p 80:80 --restart always \$IMAGE_NAME:\$SHA 

    #       if [ "\$(docker ps -q -f name=\$CONTAINER_NAME)" ]; then
    #         echo "El contenedor se está ejecutando correctamente."
    #         echo "Accede a: http://<tu-servidor>:8080"
    #       else
    #         echo "Error: No se pudo iniciar el contenedor."
    #         exit 1
    #       fi
    #       EOF

    #       chmod +x ~/deploy-scripts/deploy.sh
    #       ~/deploy-scripts/deploy.sh ${{ github.sha }}

    #       chmod +x ~/deploy-scripts/deploy.sh
    #       ~/deploy-scripts/deploy.sh ${{ github.sha }}
